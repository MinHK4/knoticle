name: Pull Request (Frontend)

on:
  pull_request:
    branches: [develop]
    paths:
      - 'frontend/**'

jobs:
  lint:
    name: Lint CI

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Dependencies
        uses: actions/cache@v3
        id: frontend-cache
        with:
          path: frontend/node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - if: ${{ steps.frontend-cache.outputs.cache-hit != 'true' }}
        name: Install Dependencies
        run: npm install
        working-directory: frontend

      - name: Check Lint
        run: npm run lint
        env:
          CI: true
        working-directory: frontend

  lighthouse:
    name: Lighthouse CI

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Dependencies
        uses: actions/cache@v3
        id: frontend-cache
        with:
          path: frontend/node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - if: ${{ steps.frontend-cache.outputs.cache-hit != 'true' }}
        name: Install Dependencies
        run: npm install
        working-directory: frontend

      - name: Build
        run: npm run build
        working-directory: frontend

      - name: Run Lighthouse CI
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          npm install -g @lhci/cli
          lhci autorun
        working-directory: frontend

      - name: Format Lighthouse Score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync("/frontend/lighthouse_reports/manifest.json"));
            let comments = "";

            results.forEach((result) => {
              const { summary, jsonPath } = result;
              const { audits } = details;

              const details = JSON.parse(fs.readFileSync(jsonPath));
              const formatResult = (res) => Math.round(res * 100);

              Object.keys(summary).forEach(
                (key) => (summary[key] = formatResult(summary[key]))
              );

              const score = (res) => (res >= 90 ? "üü¢" : res >= 50 ? "üü†" : "üî¥");

              const comment = [
                `‚ö°Ô∏è Lighthouse report!`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                { ... }
              ].join("\n");

              const detail = [
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(
                  audits["first-contentful-paint"].score * 100
                )} First Contentful Paint | ${
                  audits["first-contentful-paint"].displayValue
                } |`,
                { ... }
              ].join("\n");
              comments += comment + "\n" + detail + "\n";
            });

            core.setOutput('comments', comments)

      - name: Comment Lighthouse Report
        uses: unsplash/comment-on-pr@v1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: ${{ steps.format_lighthouse_score.outputs.comments}}
